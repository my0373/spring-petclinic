# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven (more complex)

on:
  workflow_dispatch:

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

jobs:

  # The source build job is designed to ensure that the source...
  # * builds
  # * 
  source-build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
          
      - name: Build with Maven Wrapper
        run: ./mvnw -B package

      - name: Validate Maven dependencies
        run: mvn dependency:analyze

      - name: Run Maven tests
        run: mvn test


  container-build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven

      - name: Build the Maven container image
        run: ./mvnw spring-boot:build-image

      - name: Retag image with jfrog repo
        run: docker tag spring-petclinic:3.2.0-SNAPSHOT matthewy.jfrog.io/petclinic-docker/spring-petclinic:3.2.0-SNAPSHOT

      - name: Export the built image to a tar file  
        env:
          IMAGE_NAME: matthewy.jfrog.io/petclinic-docker/spring-petclinic:3.2.0-SNAPSHOT
        run: docker save $IMAGE_NAME > /tmp/petclinic.tar
             
      - name: Upload Image as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: /tmp/petclinic.tar


  publish-build:
    needs: [source-build, container-build]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - name: Download artifacts (Docker images) from previous workflows
        uses: actions/download-artifact@v2
        with:
          name: app
          path: /tmp/petclinic/


      - name: Load Docker images from previous workflows
        run: |
          docker load --input /tmp/petclinic/petclinic.tar 


      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Scan Image for vulnerabilities
        run:
          jf docker scan matthewy.jfrog.io/petclinic-docker/spring-petclinic:3.2.0-SNAPSHOT   
            

      - name: Push Docker Image to the Artifactory repository
        env:
          IMAGE_NAME: matthewy.jfrog.io/petclinic-docker/spring-petclinic:3.2.0-SNAPSHOT
        run:
          jf docker push $IMAGE_NAME


      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: spring-petclinic
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          # jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          # jf rt build-add-git
          # Publish build info
          # jf rt build-publish
